%This file was atutomatically generated by --Generate_Dinamic--
function Qpp=Dinamic_ur10_3DOF(u)

%Joint Position
q1=u(1);
q2=u(2);
q3=u(3);

%Joint Velocity
qp1=u(4);
qp2=u(5);
qp3=u(6);

%Kinematic Parameters
L1=u(7);
L2=u(8);
L4=u(9);
L6=u(10);
L7=u(11);
L9=u(12);
L3=u(13);
L5=u(14);
L8=u(15);
L10=u(16);

%Dynamic Parameters
m1=u(17);
m2=u(18);
m3=u(19);

I111=u(20);
I112=u(21);
I113=u(22);
I122=u(23);
I123=u(24);
I133=u(25);

I211=u(26);
I212=u(27);
I213=u(28);
I222=u(29);
I223=u(30);
I233=u(31);

I311=u(32);
I312=u(33);
I313=u(34);
I322=u(35);
I323=u(36);
I333=u(37);

%Gravity
g=u(38);
%Time
t=u(39);
%Viscous Friction Matrix
Beta(1,1)=u(40);
Beta(2,2)=u(41);
Beta(3,3)=u(42);
%Gravity Vector
gx=u(43);
gy=u(44);
gz=u(45);

%Joint Position Vector
Q=[q1; q2; q3];

%Joint Velocity Vector
Qp=[qp1; qp2; qp3];


% DH Table
% THETA ALPHA a d
DH = [q1, -pi/2, 0, L1;
    q2+pi/2, pi, -L3, L2;
    q3, 0, -L5, 0;
    q1, 0, 0, L6; % CM1
    q2+pi/2, 0, -L8, L7; % CM2
    q3, 0, -L10, 0.5*L7]; % CM3

% Specify the Robot Base (with respect to the world coordinate frame in ROS)
% Here same as robot base
T0_W=eye(4);

% Compute the Relative Homogeneous Transformations

T1_0= Relative_H(DH(1,:));

T2_1= Relative_H(DH(2,:));

T3_2= Relative_H(DH(3,:));

Tcm1_0= Relative_H(DH(4,:));

Tcm2_1= Relative_H(DH(5,:));

Tcm3_2= Relative_H(DH(6,:));

% Stack of Absolute Homogeneous Transformations
%T1_0=0;
T2_0= T1_0*T2_1;
T3_0= T2_0*T3_2;


%Tcm1_0=0;
Tcm2_0= T1_0*Tcm2_1;
Tcm3_0= T2_0*Tcm3_2;

% wrt world frame, here same as the base
T1_W= T1_0;
T2_W= T2_0;
T3_W= T3_0;

Tcm1_W= Tcm1_0;
Tcm2_W= Tcm2_0;
Tcm3_W= Tcm3_0;

% Get the position of the end-effector
Xef_W=T3_W(1:3,4);
 
% Build z-vectors for Jacobian
z0= [0;0;1];
z1= T1_0(1:3,3);
z2= T2_0(1:3,3);

% from old task
% Jcm1_0= [[cross(z0,Tcm1_0(1:3,4));z0] [0 0 0 0 0 0]' [0 0 0 0 0 0]' [0 0 0 0 0 0]'];
% Jcm2_0= [cross(z0, Tcm2_0(1:3,4)), z1, [0;0;0], [0;0;0] ; z0, [0;0;0], [0;0;0], [0;0;0]]; % Jacobian of cm2
% Jcm3_0= [cross(z0, Tcm3_0(1:3,4)), z1, z2, [0;0;0]; z0, [0;0;0], [0;0;0], [0;0;0]];

% Jacobians for CoM1, CoM2 and CoM3, different approach than for coordinate
% frames
Jcm1_0 = [[cross(z0, Tcm1_0(1:3,4));z0] [0 0 0 0 0 0]' [0 0 0 0 0 0]' ];
Jcm2_0 = [[cross(z0, Tcm2_0(1:3,4));z0] [cross(z1, Tcm1_0(1:3,4)) ; z1] [0 0 0 0 0 0]' ];
Jcm3_0 = [[cross(z0, Tcm3_0(1:3,4));z0] [cross(z1, Tcm2_0(1:3,4)) ; z1] [cross(z2, Tcm1_0(1:3,4)) ; z2]];

%Complete the Inertia Matrix (symbolic form)
M1 = m1*Jcm1_0(1:3,1:3).'*Jcm1_0(1:3,1:3) + Jcm1_0(4:6,1:3).'*Tcm1_0(1:3,1:3)*I1*Tcm1_0(1:3,1:3).'*Jcm1_0(4:6,1:3);
M2 = m2*Jcm2_0(1:3,1:3).'*Jcm2_0(1:3,1:3) + Jcm2_0(4:6,1:3).'*Tcm2_0(1:3,1:3)*I2*Tcm2_0(1:3,1:3).'*Jcm2_0(4:6,1:3);
M3 = m3*Jcm3_0(1:3,1:3).'*Jcm3_0(1:3,1:3) + Jcm3_0(4:6,1:3).'*Tcm3_0(1:3,1:3)*I3*Tcm3_0(1:3,1:3).'*Jcm3_0(4:6,1:3);

M= simplify(M1+M2+M3);


%Complete Centripetal and Coriolis Matrix (symbolic form)
for i=1:3

% C(k,j)= 0.5*sum((diff(M(k,j),Q(i)) + diff(M(k,i),Q(j)) - diff(M(i,j),Q(k)))*Qp(i))  
Cor1(i)= (diff(M(1,1),Q(i)) + diff(M(1,i),Q(1)) - diff(M(i,1),Q(1)))*Qp(i) ; % k=1, j=1
Cor2(i)= (diff(M(1,2),Q(i)) + diff(M(1,i),Q(2)) - diff(M(i,2),Q(1)))*Qp(i) ; % k=1, j=2
Cor3(i)= (diff(M(1,3),Q(i)) + diff(M(1,i),Q(3)) - diff(M(i,3),Q(1)))*Qp(i) ; % k=1, j=3

Cor4(i)= (diff(M(2,1),Q(i)) + diff(M(2,i),Q(1)) - diff(M(i,1),Q(2)))*Qp(i) ; % k=2, j=1
Cor5(i)= (diff(M(2,2),Q(i)) + diff(M(2,i),Q(2)) - diff(M(i,2),Q(2)))*Qp(i) ; % k=2, j=2
Cor6(i)= (diff(M(2,3),Q(i)) + diff(M(2,i),Q(3)) - diff(M(i,3),Q(2)))*Qp(i) ; % k=2, j=3

Cor7(i)= (diff(M(3,1),Q(i)) + diff(M(3,i),Q(1)) - diff(M(i,1),Q(3)))*Qp(i) ; % k=3, j=1
Cor8(i)= (diff(M(3,2),Q(i)) + diff(M(3,i),Q(2)) - diff(M(i,2),Q(3)))*Qp(i) ; % k=3, j=2
Cor9(i)= (diff(M(3,3),Q(i)) + diff(M(3,i),Q(3)) - diff(M(i,3),Q(3)))*Qp(i) ; % k=3, j=3

end

% Stack
C(1,1)=0.5*sum(Cor1);
C(1,2)=0.5*sum(Cor2);
C(1,3)=0.5*sum(Cor3);
C(2,1)=0.5*sum(Cor4);
C(2,2)=0.5*sum(Cor5);
C(2,3)=0.5*sum(Cor6);
C(3,1)=0.5*sum(Cor7);
C(3,2)=0.5*sum(Cor8);
C(3,3)=0.5*sum(Cor9);


% Potential energy of cms
Pcm1= m1*[0;0;gz].'*Tcm1_0(1:3,4);
Pcm2= m2*[-gx;0;0].'*Tcm2_0(1:3,4);
Pcm3= m3*[-gx;0;0].'*Tcm3_0(1:3,4);
P = Pcm1+Pcm2+Pcm3;

% Gravitational Torques Vector (symbolic form)
G=[diff(P,Q(1)); diff(P,Q(2)); diff(P,Q(3))];

% Dynamical equation
Tao=M*Qpp+C*Qp+G;

% Dynamical equation with damping dynamics 
Qpp=(M)\(Tao-C*Qp-G-Beta*Qp);
